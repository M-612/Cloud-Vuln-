import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np

def visualize_cvss_distribution(vuln_data):
    """
    Visualize the distribution of CVSS scores and their components.
    """
    if not isinstance(vuln_data, pd.DataFrame):
        vuln_data = pd.DataFrame(vuln_data)
    
    fig, axes = plt.subplots(2, 1, figsize=(12, 14), subplot_kw={'polar': True} if len(axes := [None, None]) > 1 else None)
    
    # Plot 1: CVSS Score Distribution Histogram
    sns.histplot(vuln_data['cvss_score'], bins=20, kde=True, ax=axes[0])
    
    # Add CVSS severity ranges as colored backgrounds
    cvss_ranges = [
        (0, 4.0, '#00FF00', 'Low'),
        (4.0, 7.0, '#FFFF00', 'Medium'),
        (7.0, 9.0, '#FFA500', 'High'),
        (9.0, 10.0, '#FF0000', 'Critical')
    ]
    
    for start, end, color, label in cvss_ranges:
        axes[0].axvspan(start, end, alpha=0.2, color=color, label=label)
    
    axes[0].set_title('CVSS Score Distribution', fontsize=16)
    axes[0].set_xlabel('CVSS Score', fontsize=14)
    axes[0].set_ylabel('Frequency', fontsize=14)
    axes[0].legend(title="Severity Level")
    axes[0].grid(True, alpha=0.3)
    
    # Plot 2: CVSS Components Radar Chart
    components = {
        'Attack Vector': np.mean([0.85, 0.6, 0.2, 0.55]),
        'Attack Complexity': np.mean([0.7, 0.4, 0.3, 0.5]),
        'Privileges Required': np.mean([0.85, 0.6, 0.3, 0.45]),
        'User Interaction': np.mean([0.8, 0.5, 0.4, 0.55]),
        'Scope': np.mean([0.5, 0.7, 0.3, 0.6]),
        'Confidentiality': np.mean([0.9, 0.6, 0.5, 0.75]),
        'Integrity': np.mean([0.8, 0.5, 0.4, 0.65]),
        'Availability': np.mean([0.7, 0.6, 0.3, 0.5])
    }
    
    categories = list(components.keys())
    N = len(categories)
    angles = [n / float(N) * 2 * np.pi for n in range(N)]
    angles += angles[:1]
    
    values = list(components.values())
    values += values[:1]
    
    ax = plt.subplot(212, polar=True)  # 2nd subplot manually defined as polar
    ax.set_theta_offset(np.pi / 2)
    ax.set_theta_direction(-1)
    
    plt.xticks(angles[:-1], categories, fontsize=12)
    ax.set_rlabel_position(0)
    plt.yticks([0.2, 0.4, 0.6, 0.8], ["0.2", "0.4", "0.6", "0.8"], fontsize=10)
    plt.ylim(0, 1)
    
    ax.plot(angles, values, linewidth=2, linestyle='solid')
    ax.fill(angles, values, 'b', alpha=0.1)
    ax.set_title("CVSS Component Analysis (Average)", fontsize=16, y=1.1)
    
    plt.tight_layout()
    plt.savefig('cvss_distribution.png', dpi=300)
    plt.show()

def compare_cvss_by_vulnerability_type(vuln_data):
    """
    Compare CVSS scores across different vulnerability types.
    """
    if not isinstance(vuln_data, pd.DataFrame):
        vuln_data = pd.DataFrame(vuln_data)
    
    plt.figure(figsize=(14, 10))
    
    top_types = vuln_data['vulnerability_type'].value_counts().head(10).index
    plot_data = vuln_data[vuln_data['vulnerability_type'].isin(top_types)]
    
    sns.boxplot(x='vulnerability_type', y='cvss_score', data=plot_data)
    
    plt.title('CVSS Score Distribution by Vulnerability Type', fontsize=16)
    plt.xlabel('Vulnerability Type', fontsize=14)
    plt.ylabel('CVSS Score', fontsize=14)
    plt.xticks(rotation=45, ha='right')
    plt.grid(True, alpha=0.3)
    
    plt.axhspan(0, 4.0, alpha=0.1, color='green', label='Low')
    plt.axhspan(4.0, 7.0, alpha=0.1, color='yellow', label='Medium')
    plt.axhspan(7.0, 9.0, alpha=0.1, color='orange', label='High')
    plt.axhspan(9.0, 10.0, alpha=0.1, color='red', label='Critical')
    
    plt.legend(title="Severity Level")
    plt.tight_layout()
    plt.savefig('cvss_by_type.png', dpi=300)
    plt.show()

def generate_sample_data(n=100):
    """Generate sample vulnerability data for demonstration."""
    np.random.seed(42)
    
    vulnerability_types = [
        'SQL Injection', 'Cross-site Scripting', 'Command Injection',
        'Path Traversal', 'Insufficient Authentication', 'CSRF',
        'Insecure Deserialization', 'Broken Access Control',
        'Server Misconfiguration', 'Information Disclosure'
    ]
    
    severities = ['Low', 'Medium', 'High', 'Critical']
    severity_weights = [0.2, 0.4, 0.3, 0.1]
    
    data = {
        'vulnerability_type': np.random.choice(vulnerability_types, size=n),
        'severity': np.random.choice(severities, size=n, p=severity_weights),
        'cvss_score': np.clip(np.random.normal(loc=6.0, scale=2.0, size=n), 0, 10),
        'detection_date': pd.date_range(start='2024-01-01', periods=n)
    }
    
    for i in range(n):
        if data['severity'][i] == 'Low':
            data['cvss_score'][i] = np.clip(np.random.normal(loc=2.5, scale=1.0), 0, 4.0)
        elif data['severity'][i] == 'Medium':
            data['cvss_score'][i] = np.clip(np.random.normal(loc=5.5, scale=0.8), 4.0, 7.0)
        elif data['severity'][i] == 'High':
            data['cvss_score'][i] = np.clip(np.random.normal(loc=8.0, scale=0.5), 7.0, 9.0)
        else:
            data['cvss_score'][i] = np.clip(np.random.normal(loc=9.5, scale=0.3), 9.0, 10.0)
    
    return pd.DataFrame(data)

# Run this only if executing the script directly
if __name__ == "__main__":
    # Either generate synthetic data or load from CSV
    try:
        df = pd.read_csv("cve.csv")
    except FileNotFoundError:
        print("CSV not found. Using sample data.")
        df = generate_sample_data(200)

    visualize_cvss_distribution(df)
    compare_cvss_by_vulnerability_type(df)
