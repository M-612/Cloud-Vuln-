import os
import re
import json
import sqlite3
from datetime import datetime
from jinja2 import Environment, FileSystemLoader
import pdfkit


def generate_pdf_report(scan_id, scan_results):
    """Generate a PDF report for vulnerability scan results"""
    try:
        # Ensure the reports directory exists
        os.makedirs("reports", exist_ok=True)

        # Create timestamp for the report file
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_filename = f"vuln_report_{scan_id[:8]}_{timestamp}.pdf"
        report_path = os.path.join("reports", report_filename)

        # Set up Jinja2 environment
        env = Environment(loader=FileSystemLoader("templates"))
        template = env.get_template("report_template.html")

        # Process vulnerability data
        vulnerabilities = {}
        critical_count = 0
        high_count = 0
        medium_count = 0
        low_count = 0

        # Process each severity level
        for severity, vulns in scan_results["vulnerabilities"].items():
            vulnerabilities[severity] = vulns
            if severity == "Critical":
                critical_count = len(vulns)
            elif severity == "High":
                high_count = len(vulns)
            elif severity == "Medium":
                medium_count = len(vulns)
            elif severity == "Low":
                low_count = len(vulns)

        # Render the HTML template
        html_content = template.render(
            results=scan_results,
            scan_id=scan_id,
            vulnerabilities=vulnerabilities,
            critical_count=critical_count,
            high_count=high_count,
            medium_count=medium_count,
            low_count=low_count,
            total_count=critical_count + high_count + medium_count + low_count,
            generation_date=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        )

        # Generate PDF from HTML
        options = {
            "page-size": "A4",
            "margin-top": "15mm",
            "margin-right": "15mm",
            "margin-bottom": "15mm",
            "margin-left": "15mm",
            "encoding": "UTF-8",
            "no-outline": None,
            "enable-local-file-access": None,
        }

        # Generate PDF
        pdfkit.from_string(html_content, report_path, options=options)

        # Return the path to the generated report
        return report_path

    except Exception as e:
        print(f"Error generating PDF report: {e}")
        return None


def get_risk_color(severity):
    """Get color code for risk severity"""
    colors = {
        "Critical": "#d9534f",  # Red
        "High": "#f0ad4e",  # Orange
        "Medium": "#ffd700",  # Yellow
        "Low": "#5bc0de",  # Blue
        "None": "#5cb85c",  # Green
    }
    return colors.get(severity, "#777777")  # Default gray


def format_cvss_score(score):
    """Format CVSS score with appropriate color"""
    if score is None:
        return "N/A"

    score_float = float(score)

    if score_float >= 9.0:
        color = "#d9534f"  # Red
    elif score_float >= 7.0:
        color = "#f0ad4e"  # Orange
    elif score_float >= 4.0:
        color = "#ffd700"  # Yellow
    elif score_float > 0:
        color = "#5bc0de"  # Blue
    else:
        color = "#5cb85c"  # Green

    return f'<span style="color: {color}; font-weight: bold;">{score_float:.1f}</span>'


def generate_executive_summary(scan_results):
    """Generate an executive summary based on scan results"""
    url = scan_results["url"]
    vulnerabilities = scan_results["vulnerabilities"]

    # Count vulnerabilities by severity
    critical_count = len(vulnerabilities.get("Critical", []))
    high_count = len(vulnerabilities.get("High", []))
    medium_count = len(vulnerabilities.get("Medium", []))
    low_count = len(vulnerabilities.get("Low", []))
    total_count = critical_count + high_count + medium_count + low_count

    # Generate summary text
    if total_count == 0:
        return f"No vulnerabilities were found on {url}. Regular security assessments are still recommended to maintain a secure posture."

    risk_level = (
        "Critical"
        if critical_count > 0
        else "High" if high_count > 0 else "Medium" if medium_count > 0 else "Low"
    )

    summary = f"Security scan of {url} revealed {total_count} vulnerabilities ({critical_count} Critical, {high_count} High, {medium_count} Medium, {low_count} Low). "

    if critical_count > 0:
        summary += "Critical vulnerabilities require immediate attention as they represent severe security risks. "

    if high_count > 0:
        summary += "High severity issues should be addressed promptly to prevent potential exploitation. "

    if medium_count > 0:
        summary += "Medium severity vulnerabilities should be scheduled for remediation in the near term. "

    summary += "We recommend implementing the suggested remediation actions to improve the security posture of the application."

    return summary
