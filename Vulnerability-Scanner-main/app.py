import os
import pprint
import sqlite3
import uuid
from datetime import datetime
from flask import (
    Flask,
    render_template,
    request,
    redirect,
    url_for,
    flash,
    jsonify,
    send_from_directory,
)
from scanner.scanner import scan_url, get_scan_results, init_db, get_all_scans
from report.generate_report import generate_pdf_report

app = Flask(__name__)
app.secret_key = os.urandom(24)

# Ensure directories exist
os.makedirs("db", exist_ok=True)
os.makedirs("reports", exist_ok=True)

# Initialize database
init_db()


@app.route("/")
def index():
    scans = get_all_scans()
    return render_template("dashboard.html", scans=scans)


@app.route("/scan", methods=["POST"])
def scan():
    url = request.form.get("url")

    if not url:
        flash("Please enter a URL to scan", "danger")
        return redirect(url_for("index"))

    if not (url.startswith("http://") or url.startswith("https://")):
        url = "http://" + url

    # Generate a unique scan ID
    scan_id = str(uuid.uuid4())
    scan_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Start the scan in a background thread
    scan_url(scan_id, url, scan_date)

    flash(f"Scan initiated for {url}. Scan ID: {scan_id}", "success")
    return redirect(url_for("index"))


@app.route("/scan_status/<scan_id>")
def scan_status(scan_id):
    conn = sqlite3.connect("db/scans.db")
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    cursor.execute("SELECT status FROM scans WHERE scan_id = ?", (scan_id,))
    result = cursor.fetchone()
    conn.close()

    if result:
        return jsonify({"status": result["status"]})
    else:
        return jsonify({"status": "not_found"})


@app.route("/results/<scan_id>")
def results(scan_id):
    scan_results = get_scan_results(scan_id)
    print(
        "scan results are :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
    )
    pprint.pprint(scan_results)
    if scan_results:
        return render_template("report_template.html", results=scan_results)
    else:
        flash("Scan not found or still in progress", "warning")
        return redirect(url_for("index"))


@app.route("/generate_report/<scan_id>")
def generate_report(scan_id):
    scan_results = get_scan_results(scan_id)

    if not scan_results:
        flash("Scan not found or still in progress", "warning")
        return redirect(url_for("index"))

    # Generate PDF report
    report_path = generate_pdf_report(scan_id, scan_results)

    if report_path:
        # Update database with report path
        conn = sqlite3.connect("db/scans.db")
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE scans SET report_path = ? WHERE scan_id = ?", (report_path, scan_id)
        )
        conn.commit()
        conn.close()

        flash("Report generated successfully", "success")

        # Extract filename from path
        filename = os.path.basename(report_path)
        return redirect(url_for("download_report", filename=filename))
    else:
        flash("Failed to generate report", "danger")
        return redirect(url_for("index"))


@app.route("/download_report/<filename>")
def download_report(filename):
    return send_from_directory("reports", filename, as_attachment=True)


@app.route("/delete_scan/<scan_id>", methods=["POST"])
def delete_scan(scan_id):
    conn = sqlite3.connect("db/scans.db")
    cursor = conn.cursor()

    # Get report path before deleting
    cursor.execute("SELECT report_path FROM scans WHERE scan_id = ?", (scan_id,))
    result = cursor.fetchone()

    if result and result[0]:
        report_path = result[0]
        if os.path.exists(report_path):
            os.remove(report_path)

    # Delete scan from database
    cursor.execute("DELETE FROM scans WHERE scan_id = ?", (scan_id,))
    conn.commit()
    conn.close()

    flash("Scan deleted successfully", "success")
    return redirect(url_for("index"))


if __name__ == "__main__":
    app.run(debug=True)
